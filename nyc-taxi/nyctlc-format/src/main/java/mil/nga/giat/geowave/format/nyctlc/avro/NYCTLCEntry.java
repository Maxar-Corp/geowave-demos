/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */
package mil.nga.giat.geowave.format.nyctlc.avro;

@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class NYCTLCEntry extends
		org.apache.avro.specific.SpecificRecordBase implements
		org.apache.avro.specific.SpecificRecord
{
	public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser()
			.parse("{\"type\":\"record\",\"name\":\"NYCTLCEntry\",\"namespace\":\"mil.nga.giat.geowave.format.nyctlc.avro\",\"fields\":[{\"name\":\"vendor_id\",\"type\":\"int\",\"doc\":\"A code indicating the TPEP/LPEP provider that provided the record.\"},{\"name\":\"pickup_datetime\",\"type\":\"long\",\"doc\":\"The date and time when the meter was engaged.\"},{\"name\":\"dropoff_datetime\",\"type\":\"long\",\"doc\":\"The date and time when the meter was disengaged.\"},{\"name\":\"passenger_count\",\"type\":\"int\",\"doc\":\"The number of passengers in the vehicle.\"},{\"name\":\"trip_distance\",\"type\":\"double\",\"doc\":\"The elapsed trip distance in miles reported by the taximeter.\"},{\"name\":\"pickup_longitude\",\"type\":\"double\",\"doc\":\"Longitude where the meter was engaged.\"},{\"name\":\"pickup_latitude\",\"type\":\"double\",\"doc\":\"Latitude where the meter was engaged.\"},{\"name\":\"rate_code_id\",\"type\":\"int\",\"doc\":\"The final rate code in effect at the end of the trip.\"},{\"name\":\"store_and_fwd_flag\",\"type\":\"boolean\",\"doc\":\"This flag indicates whether the trip record was held in vehicle memory before sending to the vendor.\"},{\"name\":\"dropoff_longitude\",\"type\":\"double\",\"doc\":\"Longitude where the meter was disengaged.\"},{\"name\":\"dropoff_latitude\",\"type\":\"double\",\"doc\":\"Latitude where the meter was disengaged.\"},{\"name\":\"payment_type\",\"type\":\"int\",\"doc\":\"A numeric code signifying how the passenger paid for the trip.\"},{\"name\":\"fare_amount\",\"type\":\"double\",\"doc\":\"The time-and-distance fare calculated by the meter.\"},{\"name\":\"extra\",\"type\":\"double\",\"doc\":\"Miscellaneous extras and surcharges.\"},{\"name\":\"mta_tax\",\"type\":\"double\",\"doc\":\"$0.50 MTA tax that is automatically triggered based on the metered rate in use.\"},{\"name\":\"improvement_surcharge\",\"type\":\"double\",\"doc\":\"$0.30 improvement surcharge assessed trips at the flag drop. The improvement surcharge began being levied in 2015.\"},{\"name\":\"tip_amount\",\"type\":\"double\",\"doc\":\"Tip amount.\"},{\"name\":\"tolls_amount\",\"type\":\"double\",\"doc\":\"Total amount of all tolls paid in trip.\"},{\"name\":\"total_amount\",\"type\":\"double\",\"doc\":\"The total amount charged to passengers. Does not include cash tips.\"},{\"name\":\"trip_type\",\"type\":\"int\",\"doc\":\"A code indicating whether the trip was a street-hail or a dispatch that is automatically assigned based on the metered rate in use but can be altered by the driver.\"},{\"name\":\"ehail_fee\",\"type\":\"double\",\"doc\":\"\"},{\"name\":\"time_of_day_sec\",\"type\":\"long\",\"doc\":\"A derived field representing the time of day in seconds.\"},{\"name\":\"cab_type\",\"type\":\"int\",\"doc\":\"A derived field representing the source for this entry, (i.e. 1-Yellow or 2-Green\"}],\"doc:\":\"Stores yellow and green taxi trip data\"}");

	public static org.apache.avro.Schema getClassSchema() {
		return SCHEMA$;
	}

	/** A code indicating the TPEP/LPEP provider that provided the record. */
	@Deprecated
	public int vendor_id;
	/** The date and time when the meter was engaged. */
	@Deprecated
	public long pickup_datetime;
	/** The date and time when the meter was disengaged. */
	@Deprecated
	public long dropoff_datetime;
	/** The number of passengers in the vehicle. */
	@Deprecated
	public int passenger_count;
	/** The elapsed trip distance in miles reported by the taximeter. */
	@Deprecated
	public double trip_distance;
	/** Longitude where the meter was engaged. */
	@Deprecated
	public double pickup_longitude;
	/** Latitude where the meter was engaged. */
	@Deprecated
	public double pickup_latitude;
	/** The final rate code in effect at the end of the trip. */
	@Deprecated
	public int rate_code_id;
	/**
	 * This flag indicates whether the trip record was held in vehicle memory
	 * before sending to the vendor.
	 */
	@Deprecated
	public boolean store_and_fwd_flag;
	/** Longitude where the meter was disengaged. */
	@Deprecated
	public double dropoff_longitude;
	/** Latitude where the meter was disengaged. */
	@Deprecated
	public double dropoff_latitude;
	/** A numeric code signifying how the passenger paid for the trip. */
	@Deprecated
	public int payment_type;
	/** The time-and-distance fare calculated by the meter. */
	@Deprecated
	public double fare_amount;
	/** Miscellaneous extras and surcharges. */
	@Deprecated
	public double extra;
	/**
	 * $0.50 MTA tax that is automatically triggered based on the metered rate
	 * in use.
	 */
	@Deprecated
	public double mta_tax;
	/**
	 * $0.30 improvement surcharge assessed trips at the flag drop. The
	 * improvement surcharge began being levied in 2015.
	 */
	@Deprecated
	public double improvement_surcharge;
	/** Tip amount. */
	@Deprecated
	public double tip_amount;
	/** Total amount of all tolls paid in trip. */
	@Deprecated
	public double tolls_amount;
	/** The total amount charged to passengers. Does not include cash tips. */
	@Deprecated
	public double total_amount;
	/**
	 * A code indicating whether the trip was a street-hail or a dispatch that
	 * is automatically assigned based on the metered rate in use but can be
	 * altered by the driver.
	 */
	@Deprecated
	public int trip_type;
	/**  */
	@Deprecated
	public double ehail_fee;
	/** A derived field representing the time of day in seconds. */
	@Deprecated
	public long time_of_day_sec;
	/**
	 * A derived field representing the source for this entry, (i.e. 1-Yellow or
	 * 2-Green
	 */
	@Deprecated
	public int cab_type;

	/**
	 * Default constructor. Note that this does not initialize fields to their
	 * default values from the schema. If that is desired then one should use
	 * <code>newBuilder()</code>.
	 */
	public NYCTLCEntry() {}

	/**
	 * All-args constructor.
	 */
	public NYCTLCEntry(
			java.lang.Integer vendor_id,
			java.lang.Long pickup_datetime,
			java.lang.Long dropoff_datetime,
			java.lang.Integer passenger_count,
			java.lang.Double trip_distance,
			java.lang.Double pickup_longitude,
			java.lang.Double pickup_latitude,
			java.lang.Integer rate_code_id,
			java.lang.Boolean store_and_fwd_flag,
			java.lang.Double dropoff_longitude,
			java.lang.Double dropoff_latitude,
			java.lang.Integer payment_type,
			java.lang.Double fare_amount,
			java.lang.Double extra,
			java.lang.Double mta_tax,
			java.lang.Double improvement_surcharge,
			java.lang.Double tip_amount,
			java.lang.Double tolls_amount,
			java.lang.Double total_amount,
			java.lang.Integer trip_type,
			java.lang.Double ehail_fee,
			java.lang.Long time_of_day_sec,
			java.lang.Integer cab_type ) {
		this.vendor_id = vendor_id;
		this.pickup_datetime = pickup_datetime;
		this.dropoff_datetime = dropoff_datetime;
		this.passenger_count = passenger_count;
		this.trip_distance = trip_distance;
		this.pickup_longitude = pickup_longitude;
		this.pickup_latitude = pickup_latitude;
		this.rate_code_id = rate_code_id;
		this.store_and_fwd_flag = store_and_fwd_flag;
		this.dropoff_longitude = dropoff_longitude;
		this.dropoff_latitude = dropoff_latitude;
		this.payment_type = payment_type;
		this.fare_amount = fare_amount;
		this.extra = extra;
		this.mta_tax = mta_tax;
		this.improvement_surcharge = improvement_surcharge;
		this.tip_amount = tip_amount;
		this.tolls_amount = tolls_amount;
		this.total_amount = total_amount;
		this.trip_type = trip_type;
		this.ehail_fee = ehail_fee;
		this.time_of_day_sec = time_of_day_sec;
		this.cab_type = cab_type;
	}

	public org.apache.avro.Schema getSchema() {
		return SCHEMA$;
	}

	// Used by DatumWriter. Applications should not call.
	public java.lang.Object get(
			int field$ ) {
		switch (field$) {
			case 0:
				return vendor_id;
			case 1:
				return pickup_datetime;
			case 2:
				return dropoff_datetime;
			case 3:
				return passenger_count;
			case 4:
				return trip_distance;
			case 5:
				return pickup_longitude;
			case 6:
				return pickup_latitude;
			case 7:
				return rate_code_id;
			case 8:
				return store_and_fwd_flag;
			case 9:
				return dropoff_longitude;
			case 10:
				return dropoff_latitude;
			case 11:
				return payment_type;
			case 12:
				return fare_amount;
			case 13:
				return extra;
			case 14:
				return mta_tax;
			case 15:
				return improvement_surcharge;
			case 16:
				return tip_amount;
			case 17:
				return tolls_amount;
			case 18:
				return total_amount;
			case 19:
				return trip_type;
			case 20:
				return ehail_fee;
			case 21:
				return time_of_day_sec;
			case 22:
				return cab_type;
			default:
				throw new org.apache.avro.AvroRuntimeException(
						"Bad index");
		}
	}

	// Used by DatumReader. Applications should not call.
	@SuppressWarnings(value = "unchecked")
	public void put(
			int field$,
			java.lang.Object value$ ) {
		switch (field$) {
			case 0:
				vendor_id = (java.lang.Integer) value$;
				break;
			case 1:
				pickup_datetime = (java.lang.Long) value$;
				break;
			case 2:
				dropoff_datetime = (java.lang.Long) value$;
				break;
			case 3:
				passenger_count = (java.lang.Integer) value$;
				break;
			case 4:
				trip_distance = (java.lang.Double) value$;
				break;
			case 5:
				pickup_longitude = (java.lang.Double) value$;
				break;
			case 6:
				pickup_latitude = (java.lang.Double) value$;
				break;
			case 7:
				rate_code_id = (java.lang.Integer) value$;
				break;
			case 8:
				store_and_fwd_flag = (java.lang.Boolean) value$;
				break;
			case 9:
				dropoff_longitude = (java.lang.Double) value$;
				break;
			case 10:
				dropoff_latitude = (java.lang.Double) value$;
				break;
			case 11:
				payment_type = (java.lang.Integer) value$;
				break;
			case 12:
				fare_amount = (java.lang.Double) value$;
				break;
			case 13:
				extra = (java.lang.Double) value$;
				break;
			case 14:
				mta_tax = (java.lang.Double) value$;
				break;
			case 15:
				improvement_surcharge = (java.lang.Double) value$;
				break;
			case 16:
				tip_amount = (java.lang.Double) value$;
				break;
			case 17:
				tolls_amount = (java.lang.Double) value$;
				break;
			case 18:
				total_amount = (java.lang.Double) value$;
				break;
			case 19:
				trip_type = (java.lang.Integer) value$;
				break;
			case 20:
				ehail_fee = (java.lang.Double) value$;
				break;
			case 21:
				time_of_day_sec = (java.lang.Long) value$;
				break;
			case 22:
				cab_type = (java.lang.Integer) value$;
				break;
			default:
				throw new org.apache.avro.AvroRuntimeException(
						"Bad index");
		}
	}

	/**
	 * Gets the value of the 'vendor_id' field. A code indicating the TPEP/LPEP
	 * provider that provided the record.
	 */
	public java.lang.Integer getVendorId() {
		return vendor_id;
	}

	/**
	 * Sets the value of the 'vendor_id' field. A code indicating the TPEP/LPEP
	 * provider that provided the record. * @param value the value to set.
	 */
	public void setVendorId(
			java.lang.Integer value ) {
		this.vendor_id = value;
	}

	/**
	 * Gets the value of the 'pickup_datetime' field. The date and time when the
	 * meter was engaged.
	 */
	public java.lang.Long getPickupDatetime() {
		return pickup_datetime;
	}

	/**
	 * Sets the value of the 'pickup_datetime' field. The date and time when the
	 * meter was engaged. * @param value the value to set.
	 */
	public void setPickupDatetime(
			java.lang.Long value ) {
		this.pickup_datetime = value;
	}

	/**
	 * Gets the value of the 'dropoff_datetime' field. The date and time when
	 * the meter was disengaged.
	 */
	public java.lang.Long getDropoffDatetime() {
		return dropoff_datetime;
	}

	/**
	 * Sets the value of the 'dropoff_datetime' field. The date and time when
	 * the meter was disengaged. * @param value the value to set.
	 */
	public void setDropoffDatetime(
			java.lang.Long value ) {
		this.dropoff_datetime = value;
	}

	/**
	 * Gets the value of the 'passenger_count' field. The number of passengers
	 * in the vehicle.
	 */
	public java.lang.Integer getPassengerCount() {
		return passenger_count;
	}

	/**
	 * Sets the value of the 'passenger_count' field. The number of passengers
	 * in the vehicle. * @param value the value to set.
	 */
	public void setPassengerCount(
			java.lang.Integer value ) {
		this.passenger_count = value;
	}

	/**
	 * Gets the value of the 'trip_distance' field. The elapsed trip distance in
	 * miles reported by the taximeter.
	 */
	public java.lang.Double getTripDistance() {
		return trip_distance;
	}

	/**
	 * Sets the value of the 'trip_distance' field. The elapsed trip distance in
	 * miles reported by the taximeter. * @param value the value to set.
	 */
	public void setTripDistance(
			java.lang.Double value ) {
		this.trip_distance = value;
	}

	/**
	 * Gets the value of the 'pickup_longitude' field. Longitude where the meter
	 * was engaged.
	 */
	public java.lang.Double getPickupLongitude() {
		return pickup_longitude;
	}

	/**
	 * Sets the value of the 'pickup_longitude' field. Longitude where the meter
	 * was engaged. * @param value the value to set.
	 */
	public void setPickupLongitude(
			java.lang.Double value ) {
		this.pickup_longitude = value;
	}

	/**
	 * Gets the value of the 'pickup_latitude' field. Latitude where the meter
	 * was engaged.
	 */
	public java.lang.Double getPickupLatitude() {
		return pickup_latitude;
	}

	/**
	 * Sets the value of the 'pickup_latitude' field. Latitude where the meter
	 * was engaged. * @param value the value to set.
	 */
	public void setPickupLatitude(
			java.lang.Double value ) {
		this.pickup_latitude = value;
	}

	/**
	 * Gets the value of the 'rate_code_id' field. The final rate code in effect
	 * at the end of the trip.
	 */
	public java.lang.Integer getRateCodeId() {
		return rate_code_id;
	}

	/**
	 * Sets the value of the 'rate_code_id' field. The final rate code in effect
	 * at the end of the trip. * @param value the value to set.
	 */
	public void setRateCodeId(
			java.lang.Integer value ) {
		this.rate_code_id = value;
	}

	/**
	 * Gets the value of the 'store_and_fwd_flag' field. This flag indicates
	 * whether the trip record was held in vehicle memory before sending to the
	 * vendor.
	 */
	public java.lang.Boolean getStoreAndFwdFlag() {
		return store_and_fwd_flag;
	}

	/**
	 * Sets the value of the 'store_and_fwd_flag' field. This flag indicates
	 * whether the trip record was held in vehicle memory before sending to the
	 * vendor. * @param value the value to set.
	 */
	public void setStoreAndFwdFlag(
			java.lang.Boolean value ) {
		this.store_and_fwd_flag = value;
	}

	/**
	 * Gets the value of the 'dropoff_longitude' field. Longitude where the
	 * meter was disengaged.
	 */
	public java.lang.Double getDropoffLongitude() {
		return dropoff_longitude;
	}

	/**
	 * Sets the value of the 'dropoff_longitude' field. Longitude where the
	 * meter was disengaged. * @param value the value to set.
	 */
	public void setDropoffLongitude(
			java.lang.Double value ) {
		this.dropoff_longitude = value;
	}

	/**
	 * Gets the value of the 'dropoff_latitude' field. Latitude where the meter
	 * was disengaged.
	 */
	public java.lang.Double getDropoffLatitude() {
		return dropoff_latitude;
	}

	/**
	 * Sets the value of the 'dropoff_latitude' field. Latitude where the meter
	 * was disengaged. * @param value the value to set.
	 */
	public void setDropoffLatitude(
			java.lang.Double value ) {
		this.dropoff_latitude = value;
	}

	/**
	 * Gets the value of the 'payment_type' field. A numeric code signifying how
	 * the passenger paid for the trip.
	 */
	public java.lang.Integer getPaymentType() {
		return payment_type;
	}

	/**
	 * Sets the value of the 'payment_type' field. A numeric code signifying how
	 * the passenger paid for the trip. * @param value the value to set.
	 */
	public void setPaymentType(
			java.lang.Integer value ) {
		this.payment_type = value;
	}

	/**
	 * Gets the value of the 'fare_amount' field. The time-and-distance fare
	 * calculated by the meter.
	 */
	public java.lang.Double getFareAmount() {
		return fare_amount;
	}

	/**
	 * Sets the value of the 'fare_amount' field. The time-and-distance fare
	 * calculated by the meter. * @param value the value to set.
	 */
	public void setFareAmount(
			java.lang.Double value ) {
		this.fare_amount = value;
	}

	/**
	 * Gets the value of the 'extra' field. Miscellaneous extras and surcharges.
	 */
	public java.lang.Double getExtra() {
		return extra;
	}

	/**
	 * Sets the value of the 'extra' field. Miscellaneous extras and surcharges.
	 * * @param value the value to set.
	 */
	public void setExtra(
			java.lang.Double value ) {
		this.extra = value;
	}

	/**
	 * Gets the value of the 'mta_tax' field. $0.50 MTA tax that is
	 * automatically triggered based on the metered rate in use.
	 */
	public java.lang.Double getMtaTax() {
		return mta_tax;
	}

	/**
	 * Sets the value of the 'mta_tax' field. $0.50 MTA tax that is
	 * automatically triggered based on the metered rate in use. * @param value
	 * the value to set.
	 */
	public void setMtaTax(
			java.lang.Double value ) {
		this.mta_tax = value;
	}

	/**
	 * Gets the value of the 'improvement_surcharge' field. $0.30 improvement
	 * surcharge assessed trips at the flag drop. The improvement surcharge
	 * began being levied in 2015.
	 */
	public java.lang.Double getImprovementSurcharge() {
		return improvement_surcharge;
	}

	/**
	 * Sets the value of the 'improvement_surcharge' field. $0.30 improvement
	 * surcharge assessed trips at the flag drop. The improvement surcharge
	 * began being levied in 2015. * @param value the value to set.
	 */
	public void setImprovementSurcharge(
			java.lang.Double value ) {
		this.improvement_surcharge = value;
	}

	/**
	 * Gets the value of the 'tip_amount' field. Tip amount.
	 */
	public java.lang.Double getTipAmount() {
		return tip_amount;
	}

	/**
	 * Sets the value of the 'tip_amount' field. Tip amount. * @param value the
	 * value to set.
	 */
	public void setTipAmount(
			java.lang.Double value ) {
		this.tip_amount = value;
	}

	/**
	 * Gets the value of the 'tolls_amount' field. Total amount of all tolls
	 * paid in trip.
	 */
	public java.lang.Double getTollsAmount() {
		return tolls_amount;
	}

	/**
	 * Sets the value of the 'tolls_amount' field. Total amount of all tolls
	 * paid in trip. * @param value the value to set.
	 */
	public void setTollsAmount(
			java.lang.Double value ) {
		this.tolls_amount = value;
	}

	/**
	 * Gets the value of the 'total_amount' field. The total amount charged to
	 * passengers. Does not include cash tips.
	 */
	public java.lang.Double getTotalAmount() {
		return total_amount;
	}

	/**
	 * Sets the value of the 'total_amount' field. The total amount charged to
	 * passengers. Does not include cash tips. * @param value the value to set.
	 */
	public void setTotalAmount(
			java.lang.Double value ) {
		this.total_amount = value;
	}

	/**
	 * Gets the value of the 'trip_type' field. A code indicating whether the
	 * trip was a street-hail or a dispatch that is automatically assigned based
	 * on the metered rate in use but can be altered by the driver.
	 */
	public java.lang.Integer getTripType() {
		return trip_type;
	}

	/**
	 * Sets the value of the 'trip_type' field. A code indicating whether the
	 * trip was a street-hail or a dispatch that is automatically assigned based
	 * on the metered rate in use but can be altered by the driver. * @param
	 * value the value to set.
	 */
	public void setTripType(
			java.lang.Integer value ) {
		this.trip_type = value;
	}

	/**
	 * Gets the value of the 'ehail_fee' field.
	 * */
	public java.lang.Double getEhailFee() {
		return ehail_fee;
	}

	/**
	 * Sets the value of the 'ehail_fee' field. * @param value the value to set.
	 */
	public void setEhailFee(
			java.lang.Double value ) {
		this.ehail_fee = value;
	}

	/**
	 * Gets the value of the 'time_of_day_sec' field. A derived field
	 * representing the time of day in seconds.
	 */
	public java.lang.Long getTimeOfDaySec() {
		return time_of_day_sec;
	}

	/**
	 * Sets the value of the 'time_of_day_sec' field. A derived field
	 * representing the time of day in seconds. * @param value the value to set.
	 */
	public void setTimeOfDaySec(
			java.lang.Long value ) {
		this.time_of_day_sec = value;
	}

	/**
	 * Gets the value of the 'cab_type' field. A derived field representing the
	 * source for this entry, (i.e. 1-Yellow or 2-Green
	 */
	public java.lang.Integer getCabType() {
		return cab_type;
	}

	/**
	 * Sets the value of the 'cab_type' field. A derived field representing the
	 * source for this entry, (i.e. 1-Yellow or 2-Green * @param value the value
	 * to set.
	 */
	public void setCabType(
			java.lang.Integer value ) {
		this.cab_type = value;
	}

	/** Creates a new NYCTLCEntry RecordBuilder */
	public static mil.nga.giat.geowave.format.nyctlc.avro.NYCTLCEntry.Builder newBuilder() {
		return new mil.nga.giat.geowave.format.nyctlc.avro.NYCTLCEntry.Builder();
	}

	/** Creates a new NYCTLCEntry RecordBuilder by copying an existing Builder */
	public static mil.nga.giat.geowave.format.nyctlc.avro.NYCTLCEntry.Builder newBuilder(
			mil.nga.giat.geowave.format.nyctlc.avro.NYCTLCEntry.Builder other ) {
		return new mil.nga.giat.geowave.format.nyctlc.avro.NYCTLCEntry.Builder(
				other);
	}

	/**
	 * Creates a new NYCTLCEntry RecordBuilder by copying an existing
	 * NYCTLCEntry instance
	 */
	public static mil.nga.giat.geowave.format.nyctlc.avro.NYCTLCEntry.Builder newBuilder(
			mil.nga.giat.geowave.format.nyctlc.avro.NYCTLCEntry other ) {
		return new mil.nga.giat.geowave.format.nyctlc.avro.NYCTLCEntry.Builder(
				other);
	}

	/**
	 * RecordBuilder for NYCTLCEntry instances.
	 */
	public static class Builder extends
			org.apache.avro.specific.SpecificRecordBuilderBase<NYCTLCEntry> implements
			org.apache.avro.data.RecordBuilder<NYCTLCEntry>
	{

		private int vendor_id;
		private long pickup_datetime;
		private long dropoff_datetime;
		private int passenger_count;
		private double trip_distance;
		private double pickup_longitude;
		private double pickup_latitude;
		private int rate_code_id;
		private boolean store_and_fwd_flag;
		private double dropoff_longitude;
		private double dropoff_latitude;
		private int payment_type;
		private double fare_amount;
		private double extra;
		private double mta_tax;
		private double improvement_surcharge;
		private double tip_amount;
		private double tolls_amount;
		private double total_amount;
		private int trip_type;
		private double ehail_fee;
		private long time_of_day_sec;
		private int cab_type;

		/** Creates a new Builder */
		private Builder() {
			super(
					mil.nga.giat.geowave.format.nyctlc.avro.NYCTLCEntry.SCHEMA$);
		}

		/** Creates a Builder by copying an existing Builder */
		private Builder(
				mil.nga.giat.geowave.format.nyctlc.avro.NYCTLCEntry.Builder other ) {
			super(
					other);
			if (isValidValue(
					fields()[0],
					other.vendor_id)) {
				this.vendor_id = data().deepCopy(
						fields()[0].schema(),
						other.vendor_id);
				fieldSetFlags()[0] = true;
			}
			if (isValidValue(
					fields()[1],
					other.pickup_datetime)) {
				this.pickup_datetime = data().deepCopy(
						fields()[1].schema(),
						other.pickup_datetime);
				fieldSetFlags()[1] = true;
			}
			if (isValidValue(
					fields()[2],
					other.dropoff_datetime)) {
				this.dropoff_datetime = data().deepCopy(
						fields()[2].schema(),
						other.dropoff_datetime);
				fieldSetFlags()[2] = true;
			}
			if (isValidValue(
					fields()[3],
					other.passenger_count)) {
				this.passenger_count = data().deepCopy(
						fields()[3].schema(),
						other.passenger_count);
				fieldSetFlags()[3] = true;
			}
			if (isValidValue(
					fields()[4],
					other.trip_distance)) {
				this.trip_distance = data().deepCopy(
						fields()[4].schema(),
						other.trip_distance);
				fieldSetFlags()[4] = true;
			}
			if (isValidValue(
					fields()[5],
					other.pickup_longitude)) {
				this.pickup_longitude = data().deepCopy(
						fields()[5].schema(),
						other.pickup_longitude);
				fieldSetFlags()[5] = true;
			}
			if (isValidValue(
					fields()[6],
					other.pickup_latitude)) {
				this.pickup_latitude = data().deepCopy(
						fields()[6].schema(),
						other.pickup_latitude);
				fieldSetFlags()[6] = true;
			}
			if (isValidValue(
					fields()[7],
					other.rate_code_id)) {
				this.rate_code_id = data().deepCopy(
						fields()[7].schema(),
						other.rate_code_id);
				fieldSetFlags()[7] = true;
			}
			if (isValidValue(
					fields()[8],
					other.store_and_fwd_flag)) {
				this.store_and_fwd_flag = data().deepCopy(
						fields()[8].schema(),
						other.store_and_fwd_flag);
				fieldSetFlags()[8] = true;
			}
			if (isValidValue(
					fields()[9],
					other.dropoff_longitude)) {
				this.dropoff_longitude = data().deepCopy(
						fields()[9].schema(),
						other.dropoff_longitude);
				fieldSetFlags()[9] = true;
			}
			if (isValidValue(
					fields()[10],
					other.dropoff_latitude)) {
				this.dropoff_latitude = data().deepCopy(
						fields()[10].schema(),
						other.dropoff_latitude);
				fieldSetFlags()[10] = true;
			}
			if (isValidValue(
					fields()[11],
					other.payment_type)) {
				this.payment_type = data().deepCopy(
						fields()[11].schema(),
						other.payment_type);
				fieldSetFlags()[11] = true;
			}
			if (isValidValue(
					fields()[12],
					other.fare_amount)) {
				this.fare_amount = data().deepCopy(
						fields()[12].schema(),
						other.fare_amount);
				fieldSetFlags()[12] = true;
			}
			if (isValidValue(
					fields()[13],
					other.extra)) {
				this.extra = data().deepCopy(
						fields()[13].schema(),
						other.extra);
				fieldSetFlags()[13] = true;
			}
			if (isValidValue(
					fields()[14],
					other.mta_tax)) {
				this.mta_tax = data().deepCopy(
						fields()[14].schema(),
						other.mta_tax);
				fieldSetFlags()[14] = true;
			}
			if (isValidValue(
					fields()[15],
					other.improvement_surcharge)) {
				this.improvement_surcharge = data().deepCopy(
						fields()[15].schema(),
						other.improvement_surcharge);
				fieldSetFlags()[15] = true;
			}
			if (isValidValue(
					fields()[16],
					other.tip_amount)) {
				this.tip_amount = data().deepCopy(
						fields()[16].schema(),
						other.tip_amount);
				fieldSetFlags()[16] = true;
			}
			if (isValidValue(
					fields()[17],
					other.tolls_amount)) {
				this.tolls_amount = data().deepCopy(
						fields()[17].schema(),
						other.tolls_amount);
				fieldSetFlags()[17] = true;
			}
			if (isValidValue(
					fields()[18],
					other.total_amount)) {
				this.total_amount = data().deepCopy(
						fields()[18].schema(),
						other.total_amount);
				fieldSetFlags()[18] = true;
			}
			if (isValidValue(
					fields()[19],
					other.trip_type)) {
				this.trip_type = data().deepCopy(
						fields()[19].schema(),
						other.trip_type);
				fieldSetFlags()[19] = true;
			}
			if (isValidValue(
					fields()[20],
					other.ehail_fee)) {
				this.ehail_fee = data().deepCopy(
						fields()[20].schema(),
						other.ehail_fee);
				fieldSetFlags()[20] = true;
			}
			if (isValidValue(
					fields()[21],
					other.time_of_day_sec)) {
				this.time_of_day_sec = data().deepCopy(
						fields()[21].schema(),
						other.time_of_day_sec);
				fieldSetFlags()[21] = true;
			}
			if (isValidValue(
					fields()[22],
					other.cab_type)) {
				this.cab_type = data().deepCopy(
						fields()[22].schema(),
						other.cab_type);
				fieldSetFlags()[22] = true;
			}
		}

		/** Creates a Builder by copying an existing NYCTLCEntry instance */
		private Builder(
				mil.nga.giat.geowave.format.nyctlc.avro.NYCTLCEntry other ) {
			super(
					mil.nga.giat.geowave.format.nyctlc.avro.NYCTLCEntry.SCHEMA$);
			if (isValidValue(
					fields()[0],
					other.vendor_id)) {
				this.vendor_id = data().deepCopy(
						fields()[0].schema(),
						other.vendor_id);
				fieldSetFlags()[0] = true;
			}
			if (isValidValue(
					fields()[1],
					other.pickup_datetime)) {
				this.pickup_datetime = data().deepCopy(
						fields()[1].schema(),
						other.pickup_datetime);
				fieldSetFlags()[1] = true;
			}
			if (isValidValue(
					fields()[2],
					other.dropoff_datetime)) {
				this.dropoff_datetime = data().deepCopy(
						fields()[2].schema(),
						other.dropoff_datetime);
				fieldSetFlags()[2] = true;
			}
			if (isValidValue(
					fields()[3],
					other.passenger_count)) {
				this.passenger_count = data().deepCopy(
						fields()[3].schema(),
						other.passenger_count);
				fieldSetFlags()[3] = true;
			}
			if (isValidValue(
					fields()[4],
					other.trip_distance)) {
				this.trip_distance = data().deepCopy(
						fields()[4].schema(),
						other.trip_distance);
				fieldSetFlags()[4] = true;
			}
			if (isValidValue(
					fields()[5],
					other.pickup_longitude)) {
				this.pickup_longitude = data().deepCopy(
						fields()[5].schema(),
						other.pickup_longitude);
				fieldSetFlags()[5] = true;
			}
			if (isValidValue(
					fields()[6],
					other.pickup_latitude)) {
				this.pickup_latitude = data().deepCopy(
						fields()[6].schema(),
						other.pickup_latitude);
				fieldSetFlags()[6] = true;
			}
			if (isValidValue(
					fields()[7],
					other.rate_code_id)) {
				this.rate_code_id = data().deepCopy(
						fields()[7].schema(),
						other.rate_code_id);
				fieldSetFlags()[7] = true;
			}
			if (isValidValue(
					fields()[8],
					other.store_and_fwd_flag)) {
				this.store_and_fwd_flag = data().deepCopy(
						fields()[8].schema(),
						other.store_and_fwd_flag);
				fieldSetFlags()[8] = true;
			}
			if (isValidValue(
					fields()[9],
					other.dropoff_longitude)) {
				this.dropoff_longitude = data().deepCopy(
						fields()[9].schema(),
						other.dropoff_longitude);
				fieldSetFlags()[9] = true;
			}
			if (isValidValue(
					fields()[10],
					other.dropoff_latitude)) {
				this.dropoff_latitude = data().deepCopy(
						fields()[10].schema(),
						other.dropoff_latitude);
				fieldSetFlags()[10] = true;
			}
			if (isValidValue(
					fields()[11],
					other.payment_type)) {
				this.payment_type = data().deepCopy(
						fields()[11].schema(),
						other.payment_type);
				fieldSetFlags()[11] = true;
			}
			if (isValidValue(
					fields()[12],
					other.fare_amount)) {
				this.fare_amount = data().deepCopy(
						fields()[12].schema(),
						other.fare_amount);
				fieldSetFlags()[12] = true;
			}
			if (isValidValue(
					fields()[13],
					other.extra)) {
				this.extra = data().deepCopy(
						fields()[13].schema(),
						other.extra);
				fieldSetFlags()[13] = true;
			}
			if (isValidValue(
					fields()[14],
					other.mta_tax)) {
				this.mta_tax = data().deepCopy(
						fields()[14].schema(),
						other.mta_tax);
				fieldSetFlags()[14] = true;
			}
			if (isValidValue(
					fields()[15],
					other.improvement_surcharge)) {
				this.improvement_surcharge = data().deepCopy(
						fields()[15].schema(),
						other.improvement_surcharge);
				fieldSetFlags()[15] = true;
			}
			if (isValidValue(
					fields()[16],
					other.tip_amount)) {
				this.tip_amount = data().deepCopy(
						fields()[16].schema(),
						other.tip_amount);
				fieldSetFlags()[16] = true;
			}
			if (isValidValue(
					fields()[17],
					other.tolls_amount)) {
				this.tolls_amount = data().deepCopy(
						fields()[17].schema(),
						other.tolls_amount);
				fieldSetFlags()[17] = true;
			}
			if (isValidValue(
					fields()[18],
					other.total_amount)) {
				this.total_amount = data().deepCopy(
						fields()[18].schema(),
						other.total_amount);
				fieldSetFlags()[18] = true;
			}
			if (isValidValue(
					fields()[19],
					other.trip_type)) {
				this.trip_type = data().deepCopy(
						fields()[19].schema(),
						other.trip_type);
				fieldSetFlags()[19] = true;
			}
			if (isValidValue(
					fields()[20],
					other.ehail_fee)) {
				this.ehail_fee = data().deepCopy(
						fields()[20].schema(),
						other.ehail_fee);
				fieldSetFlags()[20] = true;
			}
			if (isValidValue(
					fields()[21],
					other.time_of_day_sec)) {
				this.time_of_day_sec = data().deepCopy(
						fields()[21].schema(),
						other.time_of_day_sec);
				fieldSetFlags()[21] = true;
			}
			if (isValidValue(
					fields()[22],
					other.cab_type)) {
				this.cab_type = data().deepCopy(
						fields()[22].schema(),
						other.cab_type);
				fieldSetFlags()[22] = true;
			}
		}

		/** Gets the value of the 'vendor_id' field */
		public java.lang.Integer getVendorId() {
			return vendor_id;
		}

		/** Sets the value of the 'vendor_id' field */
		public mil.nga.giat.geowave.format.nyctlc.avro.NYCTLCEntry.Builder setVendorId(
				int value ) {
			validate(
					fields()[0],
					value);
			this.vendor_id = value;
			fieldSetFlags()[0] = true;
			return this;
		}

		/** Checks whether the 'vendor_id' field has been set */
		public boolean hasVendorId() {
			return fieldSetFlags()[0];
		}

		/** Clears the value of the 'vendor_id' field */
		public mil.nga.giat.geowave.format.nyctlc.avro.NYCTLCEntry.Builder clearVendorId() {
			fieldSetFlags()[0] = false;
			return this;
		}

		/** Gets the value of the 'pickup_datetime' field */
		public java.lang.Long getPickupDatetime() {
			return pickup_datetime;
		}

		/** Sets the value of the 'pickup_datetime' field */
		public mil.nga.giat.geowave.format.nyctlc.avro.NYCTLCEntry.Builder setPickupDatetime(
				long value ) {
			validate(
					fields()[1],
					value);
			this.pickup_datetime = value;
			fieldSetFlags()[1] = true;
			return this;
		}

		/** Checks whether the 'pickup_datetime' field has been set */
		public boolean hasPickupDatetime() {
			return fieldSetFlags()[1];
		}

		/** Clears the value of the 'pickup_datetime' field */
		public mil.nga.giat.geowave.format.nyctlc.avro.NYCTLCEntry.Builder clearPickupDatetime() {
			fieldSetFlags()[1] = false;
			return this;
		}

		/** Gets the value of the 'dropoff_datetime' field */
		public java.lang.Long getDropoffDatetime() {
			return dropoff_datetime;
		}

		/** Sets the value of the 'dropoff_datetime' field */
		public mil.nga.giat.geowave.format.nyctlc.avro.NYCTLCEntry.Builder setDropoffDatetime(
				long value ) {
			validate(
					fields()[2],
					value);
			this.dropoff_datetime = value;
			fieldSetFlags()[2] = true;
			return this;
		}

		/** Checks whether the 'dropoff_datetime' field has been set */
		public boolean hasDropoffDatetime() {
			return fieldSetFlags()[2];
		}

		/** Clears the value of the 'dropoff_datetime' field */
		public mil.nga.giat.geowave.format.nyctlc.avro.NYCTLCEntry.Builder clearDropoffDatetime() {
			fieldSetFlags()[2] = false;
			return this;
		}

		/** Gets the value of the 'passenger_count' field */
		public java.lang.Integer getPassengerCount() {
			return passenger_count;
		}

		/** Sets the value of the 'passenger_count' field */
		public mil.nga.giat.geowave.format.nyctlc.avro.NYCTLCEntry.Builder setPassengerCount(
				int value ) {
			validate(
					fields()[3],
					value);
			this.passenger_count = value;
			fieldSetFlags()[3] = true;
			return this;
		}

		/** Checks whether the 'passenger_count' field has been set */
		public boolean hasPassengerCount() {
			return fieldSetFlags()[3];
		}

		/** Clears the value of the 'passenger_count' field */
		public mil.nga.giat.geowave.format.nyctlc.avro.NYCTLCEntry.Builder clearPassengerCount() {
			fieldSetFlags()[3] = false;
			return this;
		}

		/** Gets the value of the 'trip_distance' field */
		public java.lang.Double getTripDistance() {
			return trip_distance;
		}

		/** Sets the value of the 'trip_distance' field */
		public mil.nga.giat.geowave.format.nyctlc.avro.NYCTLCEntry.Builder setTripDistance(
				double value ) {
			validate(
					fields()[4],
					value);
			this.trip_distance = value;
			fieldSetFlags()[4] = true;
			return this;
		}

		/** Checks whether the 'trip_distance' field has been set */
		public boolean hasTripDistance() {
			return fieldSetFlags()[4];
		}

		/** Clears the value of the 'trip_distance' field */
		public mil.nga.giat.geowave.format.nyctlc.avro.NYCTLCEntry.Builder clearTripDistance() {
			fieldSetFlags()[4] = false;
			return this;
		}

		/** Gets the value of the 'pickup_longitude' field */
		public java.lang.Double getPickupLongitude() {
			return pickup_longitude;
		}

		/** Sets the value of the 'pickup_longitude' field */
		public mil.nga.giat.geowave.format.nyctlc.avro.NYCTLCEntry.Builder setPickupLongitude(
				double value ) {
			validate(
					fields()[5],
					value);
			this.pickup_longitude = value;
			fieldSetFlags()[5] = true;
			return this;
		}

		/** Checks whether the 'pickup_longitude' field has been set */
		public boolean hasPickupLongitude() {
			return fieldSetFlags()[5];
		}

		/** Clears the value of the 'pickup_longitude' field */
		public mil.nga.giat.geowave.format.nyctlc.avro.NYCTLCEntry.Builder clearPickupLongitude() {
			fieldSetFlags()[5] = false;
			return this;
		}

		/** Gets the value of the 'pickup_latitude' field */
		public java.lang.Double getPickupLatitude() {
			return pickup_latitude;
		}

		/** Sets the value of the 'pickup_latitude' field */
		public mil.nga.giat.geowave.format.nyctlc.avro.NYCTLCEntry.Builder setPickupLatitude(
				double value ) {
			validate(
					fields()[6],
					value);
			this.pickup_latitude = value;
			fieldSetFlags()[6] = true;
			return this;
		}

		/** Checks whether the 'pickup_latitude' field has been set */
		public boolean hasPickupLatitude() {
			return fieldSetFlags()[6];
		}

		/** Clears the value of the 'pickup_latitude' field */
		public mil.nga.giat.geowave.format.nyctlc.avro.NYCTLCEntry.Builder clearPickupLatitude() {
			fieldSetFlags()[6] = false;
			return this;
		}

		/** Gets the value of the 'rate_code_id' field */
		public java.lang.Integer getRateCodeId() {
			return rate_code_id;
		}

		/** Sets the value of the 'rate_code_id' field */
		public mil.nga.giat.geowave.format.nyctlc.avro.NYCTLCEntry.Builder setRateCodeId(
				int value ) {
			validate(
					fields()[7],
					value);
			this.rate_code_id = value;
			fieldSetFlags()[7] = true;
			return this;
		}

		/** Checks whether the 'rate_code_id' field has been set */
		public boolean hasRateCodeId() {
			return fieldSetFlags()[7];
		}

		/** Clears the value of the 'rate_code_id' field */
		public mil.nga.giat.geowave.format.nyctlc.avro.NYCTLCEntry.Builder clearRateCodeId() {
			fieldSetFlags()[7] = false;
			return this;
		}

		/** Gets the value of the 'store_and_fwd_flag' field */
		public java.lang.Boolean getStoreAndFwdFlag() {
			return store_and_fwd_flag;
		}

		/** Sets the value of the 'store_and_fwd_flag' field */
		public mil.nga.giat.geowave.format.nyctlc.avro.NYCTLCEntry.Builder setStoreAndFwdFlag(
				boolean value ) {
			validate(
					fields()[8],
					value);
			this.store_and_fwd_flag = value;
			fieldSetFlags()[8] = true;
			return this;
		}

		/** Checks whether the 'store_and_fwd_flag' field has been set */
		public boolean hasStoreAndFwdFlag() {
			return fieldSetFlags()[8];
		}

		/** Clears the value of the 'store_and_fwd_flag' field */
		public mil.nga.giat.geowave.format.nyctlc.avro.NYCTLCEntry.Builder clearStoreAndFwdFlag() {
			fieldSetFlags()[8] = false;
			return this;
		}

		/** Gets the value of the 'dropoff_longitude' field */
		public java.lang.Double getDropoffLongitude() {
			return dropoff_longitude;
		}

		/** Sets the value of the 'dropoff_longitude' field */
		public mil.nga.giat.geowave.format.nyctlc.avro.NYCTLCEntry.Builder setDropoffLongitude(
				double value ) {
			validate(
					fields()[9],
					value);
			this.dropoff_longitude = value;
			fieldSetFlags()[9] = true;
			return this;
		}

		/** Checks whether the 'dropoff_longitude' field has been set */
		public boolean hasDropoffLongitude() {
			return fieldSetFlags()[9];
		}

		/** Clears the value of the 'dropoff_longitude' field */
		public mil.nga.giat.geowave.format.nyctlc.avro.NYCTLCEntry.Builder clearDropoffLongitude() {
			fieldSetFlags()[9] = false;
			return this;
		}

		/** Gets the value of the 'dropoff_latitude' field */
		public java.lang.Double getDropoffLatitude() {
			return dropoff_latitude;
		}

		/** Sets the value of the 'dropoff_latitude' field */
		public mil.nga.giat.geowave.format.nyctlc.avro.NYCTLCEntry.Builder setDropoffLatitude(
				double value ) {
			validate(
					fields()[10],
					value);
			this.dropoff_latitude = value;
			fieldSetFlags()[10] = true;
			return this;
		}

		/** Checks whether the 'dropoff_latitude' field has been set */
		public boolean hasDropoffLatitude() {
			return fieldSetFlags()[10];
		}

		/** Clears the value of the 'dropoff_latitude' field */
		public mil.nga.giat.geowave.format.nyctlc.avro.NYCTLCEntry.Builder clearDropoffLatitude() {
			fieldSetFlags()[10] = false;
			return this;
		}

		/** Gets the value of the 'payment_type' field */
		public java.lang.Integer getPaymentType() {
			return payment_type;
		}

		/** Sets the value of the 'payment_type' field */
		public mil.nga.giat.geowave.format.nyctlc.avro.NYCTLCEntry.Builder setPaymentType(
				int value ) {
			validate(
					fields()[11],
					value);
			this.payment_type = value;
			fieldSetFlags()[11] = true;
			return this;
		}

		/** Checks whether the 'payment_type' field has been set */
		public boolean hasPaymentType() {
			return fieldSetFlags()[11];
		}

		/** Clears the value of the 'payment_type' field */
		public mil.nga.giat.geowave.format.nyctlc.avro.NYCTLCEntry.Builder clearPaymentType() {
			fieldSetFlags()[11] = false;
			return this;
		}

		/** Gets the value of the 'fare_amount' field */
		public java.lang.Double getFareAmount() {
			return fare_amount;
		}

		/** Sets the value of the 'fare_amount' field */
		public mil.nga.giat.geowave.format.nyctlc.avro.NYCTLCEntry.Builder setFareAmount(
				double value ) {
			validate(
					fields()[12],
					value);
			this.fare_amount = value;
			fieldSetFlags()[12] = true;
			return this;
		}

		/** Checks whether the 'fare_amount' field has been set */
		public boolean hasFareAmount() {
			return fieldSetFlags()[12];
		}

		/** Clears the value of the 'fare_amount' field */
		public mil.nga.giat.geowave.format.nyctlc.avro.NYCTLCEntry.Builder clearFareAmount() {
			fieldSetFlags()[12] = false;
			return this;
		}

		/** Gets the value of the 'extra' field */
		public java.lang.Double getExtra() {
			return extra;
		}

		/** Sets the value of the 'extra' field */
		public mil.nga.giat.geowave.format.nyctlc.avro.NYCTLCEntry.Builder setExtra(
				double value ) {
			validate(
					fields()[13],
					value);
			this.extra = value;
			fieldSetFlags()[13] = true;
			return this;
		}

		/** Checks whether the 'extra' field has been set */
		public boolean hasExtra() {
			return fieldSetFlags()[13];
		}

		/** Clears the value of the 'extra' field */
		public mil.nga.giat.geowave.format.nyctlc.avro.NYCTLCEntry.Builder clearExtra() {
			fieldSetFlags()[13] = false;
			return this;
		}

		/** Gets the value of the 'mta_tax' field */
		public java.lang.Double getMtaTax() {
			return mta_tax;
		}

		/** Sets the value of the 'mta_tax' field */
		public mil.nga.giat.geowave.format.nyctlc.avro.NYCTLCEntry.Builder setMtaTax(
				double value ) {
			validate(
					fields()[14],
					value);
			this.mta_tax = value;
			fieldSetFlags()[14] = true;
			return this;
		}

		/** Checks whether the 'mta_tax' field has been set */
		public boolean hasMtaTax() {
			return fieldSetFlags()[14];
		}

		/** Clears the value of the 'mta_tax' field */
		public mil.nga.giat.geowave.format.nyctlc.avro.NYCTLCEntry.Builder clearMtaTax() {
			fieldSetFlags()[14] = false;
			return this;
		}

		/** Gets the value of the 'improvement_surcharge' field */
		public java.lang.Double getImprovementSurcharge() {
			return improvement_surcharge;
		}

		/** Sets the value of the 'improvement_surcharge' field */
		public mil.nga.giat.geowave.format.nyctlc.avro.NYCTLCEntry.Builder setImprovementSurcharge(
				double value ) {
			validate(
					fields()[15],
					value);
			this.improvement_surcharge = value;
			fieldSetFlags()[15] = true;
			return this;
		}

		/** Checks whether the 'improvement_surcharge' field has been set */
		public boolean hasImprovementSurcharge() {
			return fieldSetFlags()[15];
		}

		/** Clears the value of the 'improvement_surcharge' field */
		public mil.nga.giat.geowave.format.nyctlc.avro.NYCTLCEntry.Builder clearImprovementSurcharge() {
			fieldSetFlags()[15] = false;
			return this;
		}

		/** Gets the value of the 'tip_amount' field */
		public java.lang.Double getTipAmount() {
			return tip_amount;
		}

		/** Sets the value of the 'tip_amount' field */
		public mil.nga.giat.geowave.format.nyctlc.avro.NYCTLCEntry.Builder setTipAmount(
				double value ) {
			validate(
					fields()[16],
					value);
			this.tip_amount = value;
			fieldSetFlags()[16] = true;
			return this;
		}

		/** Checks whether the 'tip_amount' field has been set */
		public boolean hasTipAmount() {
			return fieldSetFlags()[16];
		}

		/** Clears the value of the 'tip_amount' field */
		public mil.nga.giat.geowave.format.nyctlc.avro.NYCTLCEntry.Builder clearTipAmount() {
			fieldSetFlags()[16] = false;
			return this;
		}

		/** Gets the value of the 'tolls_amount' field */
		public java.lang.Double getTollsAmount() {
			return tolls_amount;
		}

		/** Sets the value of the 'tolls_amount' field */
		public mil.nga.giat.geowave.format.nyctlc.avro.NYCTLCEntry.Builder setTollsAmount(
				double value ) {
			validate(
					fields()[17],
					value);
			this.tolls_amount = value;
			fieldSetFlags()[17] = true;
			return this;
		}

		/** Checks whether the 'tolls_amount' field has been set */
		public boolean hasTollsAmount() {
			return fieldSetFlags()[17];
		}

		/** Clears the value of the 'tolls_amount' field */
		public mil.nga.giat.geowave.format.nyctlc.avro.NYCTLCEntry.Builder clearTollsAmount() {
			fieldSetFlags()[17] = false;
			return this;
		}

		/** Gets the value of the 'total_amount' field */
		public java.lang.Double getTotalAmount() {
			return total_amount;
		}

		/** Sets the value of the 'total_amount' field */
		public mil.nga.giat.geowave.format.nyctlc.avro.NYCTLCEntry.Builder setTotalAmount(
				double value ) {
			validate(
					fields()[18],
					value);
			this.total_amount = value;
			fieldSetFlags()[18] = true;
			return this;
		}

		/** Checks whether the 'total_amount' field has been set */
		public boolean hasTotalAmount() {
			return fieldSetFlags()[18];
		}

		/** Clears the value of the 'total_amount' field */
		public mil.nga.giat.geowave.format.nyctlc.avro.NYCTLCEntry.Builder clearTotalAmount() {
			fieldSetFlags()[18] = false;
			return this;
		}

		/** Gets the value of the 'trip_type' field */
		public java.lang.Integer getTripType() {
			return trip_type;
		}

		/** Sets the value of the 'trip_type' field */
		public mil.nga.giat.geowave.format.nyctlc.avro.NYCTLCEntry.Builder setTripType(
				int value ) {
			validate(
					fields()[19],
					value);
			this.trip_type = value;
			fieldSetFlags()[19] = true;
			return this;
		}

		/** Checks whether the 'trip_type' field has been set */
		public boolean hasTripType() {
			return fieldSetFlags()[19];
		}

		/** Clears the value of the 'trip_type' field */
		public mil.nga.giat.geowave.format.nyctlc.avro.NYCTLCEntry.Builder clearTripType() {
			fieldSetFlags()[19] = false;
			return this;
		}

		/** Gets the value of the 'ehail_fee' field */
		public java.lang.Double getEhailFee() {
			return ehail_fee;
		}

		/** Sets the value of the 'ehail_fee' field */
		public mil.nga.giat.geowave.format.nyctlc.avro.NYCTLCEntry.Builder setEhailFee(
				double value ) {
			validate(
					fields()[20],
					value);
			this.ehail_fee = value;
			fieldSetFlags()[20] = true;
			return this;
		}

		/** Checks whether the 'ehail_fee' field has been set */
		public boolean hasEhailFee() {
			return fieldSetFlags()[20];
		}

		/** Clears the value of the 'ehail_fee' field */
		public mil.nga.giat.geowave.format.nyctlc.avro.NYCTLCEntry.Builder clearEhailFee() {
			fieldSetFlags()[20] = false;
			return this;
		}

		/** Gets the value of the 'time_of_day_sec' field */
		public java.lang.Long getTimeOfDaySec() {
			return time_of_day_sec;
		}

		/** Sets the value of the 'time_of_day_sec' field */
		public mil.nga.giat.geowave.format.nyctlc.avro.NYCTLCEntry.Builder setTimeOfDaySec(
				long value ) {
			validate(
					fields()[21],
					value);
			this.time_of_day_sec = value;
			fieldSetFlags()[21] = true;
			return this;
		}

		/** Checks whether the 'time_of_day_sec' field has been set */
		public boolean hasTimeOfDaySec() {
			return fieldSetFlags()[21];
		}

		/** Clears the value of the 'time_of_day_sec' field */
		public mil.nga.giat.geowave.format.nyctlc.avro.NYCTLCEntry.Builder clearTimeOfDaySec() {
			fieldSetFlags()[21] = false;
			return this;
		}

		/** Gets the value of the 'cab_type' field */
		public java.lang.Integer getCabType() {
			return cab_type;
		}

		/** Sets the value of the 'cab_type' field */
		public mil.nga.giat.geowave.format.nyctlc.avro.NYCTLCEntry.Builder setCabType(
				int value ) {
			validate(
					fields()[22],
					value);
			this.cab_type = value;
			fieldSetFlags()[22] = true;
			return this;
		}

		/** Checks whether the 'cab_type' field has been set */
		public boolean hasCabType() {
			return fieldSetFlags()[22];
		}

		/** Clears the value of the 'cab_type' field */
		public mil.nga.giat.geowave.format.nyctlc.avro.NYCTLCEntry.Builder clearCabType() {
			fieldSetFlags()[22] = false;
			return this;
		}

		@Override
		public NYCTLCEntry build() {
			try {
				NYCTLCEntry record = new NYCTLCEntry();
				record.vendor_id = fieldSetFlags()[0] ? this.vendor_id : (java.lang.Integer) defaultValue(fields()[0]);
				record.pickup_datetime = fieldSetFlags()[1] ? this.pickup_datetime
						: (java.lang.Long) defaultValue(fields()[1]);
				record.dropoff_datetime = fieldSetFlags()[2] ? this.dropoff_datetime
						: (java.lang.Long) defaultValue(fields()[2]);
				record.passenger_count = fieldSetFlags()[3] ? this.passenger_count
						: (java.lang.Integer) defaultValue(fields()[3]);
				record.trip_distance = fieldSetFlags()[4] ? this.trip_distance
						: (java.lang.Double) defaultValue(fields()[4]);
				record.pickup_longitude = fieldSetFlags()[5] ? this.pickup_longitude
						: (java.lang.Double) defaultValue(fields()[5]);
				record.pickup_latitude = fieldSetFlags()[6] ? this.pickup_latitude
						: (java.lang.Double) defaultValue(fields()[6]);
				record.rate_code_id = fieldSetFlags()[7] ? this.rate_code_id
						: (java.lang.Integer) defaultValue(fields()[7]);
				record.store_and_fwd_flag = fieldSetFlags()[8] ? this.store_and_fwd_flag
						: (java.lang.Boolean) defaultValue(fields()[8]);
				record.dropoff_longitude = fieldSetFlags()[9] ? this.dropoff_longitude
						: (java.lang.Double) defaultValue(fields()[9]);
				record.dropoff_latitude = fieldSetFlags()[10] ? this.dropoff_latitude
						: (java.lang.Double) defaultValue(fields()[10]);
				record.payment_type = fieldSetFlags()[11] ? this.payment_type
						: (java.lang.Integer) defaultValue(fields()[11]);
				record.fare_amount = fieldSetFlags()[12] ? this.fare_amount
						: (java.lang.Double) defaultValue(fields()[12]);
				record.extra = fieldSetFlags()[13] ? this.extra : (java.lang.Double) defaultValue(fields()[13]);
				record.mta_tax = fieldSetFlags()[14] ? this.mta_tax : (java.lang.Double) defaultValue(fields()[14]);
				record.improvement_surcharge = fieldSetFlags()[15] ? this.improvement_surcharge
						: (java.lang.Double) defaultValue(fields()[15]);
				record.tip_amount = fieldSetFlags()[16] ? this.tip_amount
						: (java.lang.Double) defaultValue(fields()[16]);
				record.tolls_amount = fieldSetFlags()[17] ? this.tolls_amount
						: (java.lang.Double) defaultValue(fields()[17]);
				record.total_amount = fieldSetFlags()[18] ? this.total_amount
						: (java.lang.Double) defaultValue(fields()[18]);
				record.trip_type = fieldSetFlags()[19] ? this.trip_type
						: (java.lang.Integer) defaultValue(fields()[19]);
				record.ehail_fee = fieldSetFlags()[20] ? this.ehail_fee : (java.lang.Double) defaultValue(fields()[20]);
				record.time_of_day_sec = fieldSetFlags()[21] ? this.time_of_day_sec
						: (java.lang.Long) defaultValue(fields()[21]);
				record.cab_type = fieldSetFlags()[22] ? this.cab_type : (java.lang.Integer) defaultValue(fields()[22]);
				return record;
			}
			catch (Exception e) {
				throw new org.apache.avro.AvroRuntimeException(
						e);
			}
		}
	}
}
